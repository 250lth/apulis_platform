apiVersion: v1
data:
  bootstrap.sh: "#! /bin/bash\nset -ex\n\nRUN_TIME_DIR=/dlts-runtime\nSCRIPT_DIR=/pod/scripts\nLOG_DIR=/pod/logs\n\nmkdir
    -p ${RUN_TIME_DIR}\nmkdir -p ${SCRIPT_DIR}\nmkdir -p ${LOG_DIR}\n\n. ${RUN_TIME_DIR}/env/init.env\nsh
    -x ${RUN_TIME_DIR}/install.sh\n\n# set apt mirrors for foreign sources\n#sudo
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub\n#sed
    -i 's|https\\?://[^/]\\+/|http://mirrors.aliyun.com/|' /etc/apt/sources.list\n\n#
    to avoid apt-get update error:\n# download.nvidia.cn: connection timeout\nrm -rf
    /etc/apt/sources.list.d/cuda.list /etc/apt/sources.list.d/cuda.list.save /etc/apt/sources.list.d/graphics-drivers-ubuntu-ppa-bionic.list
    /etc/apt/sources.list.d/nvidia-ml.list /etc/apt/sources.list.d/nvidia-ml.list.save\n\necho
    bootstrap starts at `date` &>> ${LOG_DIR}/bootstrap.log\n\n# https://stackoverflow.com/a/26759734/845762\nif
    ! [ -x \"$(command -v sudo)\" ] ; then\n    time apt-get update && time apt-get
    install -y sudo\nfi\nif ! [ -x \"$(command -v ifconfig)\" ];then\n   time apt-get
    update && time apt-get install -y net-tools\nfi\n\nif [ \"$DLWS_ROLE_NAME\" !=
    \"inferenceworker\" ];\nthen\n\t# Dir for saving running status\n\texport PROC_DIR=/pod/running\n\trm
    -rf ${PROC_DIR}\n\tmkdir -p ${PROC_DIR}\n\n\t# Dir for logs\n\texport LOG_DIR=/pod/logs\n\t#rm
    -rf ${LOG_DIR}\n\tmkdir -p ${LOG_DIR}\n\n\t# Save the pid.\n\tPID_FILE=${PROC_DIR}/pid\n\techo
    $$ > $PID_FILE\nfi\n\n# Setup container\necho \"==========================begin
    to create user and setup env =============\" &>> ${LOG_DIR}/bootstrap.log\nbash
    ${SCRIPT_DIR}/init_user.sh &>> ${LOG_DIR}/bootstrap.log\necho \"==========================create
    user done!===============================\" &>> ${LOG_DIR}/bootstrap.log\n\nif
    [ \"$DLWS_ROLE_NAME\" != \"inferenceworker\" ];\nthen\n\ttouch ${PROC_DIR}/CONTAINER_READY\nfi\n\n#
    setup ib config\necho \"===========================begin to setup ib config==============================\"&>>
    ${LOG_DIR}/bootstrap.log\nbash ${SCRIPT_DIR}/setup_ib_config.sh &>> ${LOG_DIR}/bootstrap.log\necho
    \"===========================setup ib config done!=================================\"&>>
    ${LOG_DIR}/bootstrap.log\n\n# Setup roles\necho \"===========================begin
    to start ssh==============================\"&>> ${LOG_DIR}/bootstrap.log\nbash
    ${SCRIPT_DIR}/setup_sshd.sh &>> ${LOG_DIR}/bootstrap.log\necho \"===========================start
    ssh done!=================================\"&>> ${LOG_DIR}/bootstrap.log\n\nif
    [ \"$DLWS_ROLE_NAME\" != \"inferenceworker\" ];\nthen\n  echo \"=========================begin
    to setup ssh!=============================\"&>> ${LOG_DIR}/bootstrap.log\n    bash
    ${SCRIPT_DIR}/setup_ssh_config.sh &>> ${LOG_DIR}/bootstrap.log\n\ttouch ${PROC_DIR}/ROLE_READY\n\techo
    \"=========================setup ssh done!================================\"&>>
    ${LOG_DIR}/bootstrap.log\n\n\t# Setup job\n\t# TODO\n\ttouch ${PROC_DIR}/JOB_READY\nfi\n\n#
    setup npu device info for npu distributing jobs\nnpu_info_dir=/home/${DLWS_USER_NAME}/.npu/${DLWS_JOB_ID}\nmkdir
    -p $npu_info_dir\n\nif [ \"$DLWS_ROLE_NAME\" = \"worker\" ] && [ \"$DLWS_IS_NPU_JOB\"
    = \"true\" ];\nthen\n    ## worker pod\n\techo \"ip=${NPU_IPS}\" >> ${npu_info_dir}/npu_${DLWS_ROLE_IDX}.info\n\thost_ip=`ifconfig
    |grep inet |grep 192.168.3| awk '{print $2}'`\n\techo \"host=${host_ip}\" >> ${npu_info_dir}/npu_${DLWS_ROLE_IDX}.info\nelif
    [ \"$DLWS_ROLE_NAME\" = \"ps\" ] && [ \"$DLWS_IS_NPU_JOB\" = \"true\" ];\nthen\n\t##
    master pod, generate hccl.json\n\tpython ${SCRIPT_DIR}/setup_npu.py master\nfi\n\n\necho
    bootstrap ends at `date` &>> ${LOG_DIR}/bootstrap.log\n\nset +e\n# Execute user's
    command for the job\nif ([ \"$DLWS_ROLE_NAME\" = \"worker\" ] && [ \"$DLWS_IS_NPU_JOB\"
    = \"false\" ]) || ([ \"$DLWS_ROLE_NAME\" = \"ps\" ] && [ \"$DLWS_IS_NPU_JOB\"
    = \"true\" ]);\nthen\n    runuser -l ${DLWS_USER_NAME} -c \"sleep infinity\"\nelse\n
    \   printenv DLWS_LAUNCH_CMD > /pod/job_command.sh\n    chmod ugo+rx /pod/job_command.sh\n
    \   chmod ugo+rx /pod.env\n    echo \"============================begin to exec
    command!==========================\"&>> ${LOG_DIR}/bootstrap.log\n    runuser
    -l ${DLWS_USER_NAME} -c /pod/job_command.sh\n    # Save exit code\n    EXIT_CODE=$?\n
    \   echo  `date` \": ${EXIT_CODE}\"  > ${PROC_DIR}/EXIT_CODE\nfi\n\n# exit\nexit
    ${EXIT_CODE}\n"
  init_user.sh: |
    #/bin/bash
    set -ex

    #export POD_NAME=
    #export DLWS_GID=
    #export DLWS_UID=
    #export DLWS_USER_NAME=
    export ENV_FILE=/pod.env

    # install required pkgs
    export DEBIAN_FRONTEND=noninteractive
    time apt-get update && time apt-get install sudo openssl -y

    # setup user and group, fix permissions
    addgroup --force-badname --gid  ${DLWS_GID} domainusers
    adduser --force-badname --home /home/${DLWS_USER_NAME} --shell /bin/bash --uid ${DLWS_UID}  -gecos '' --gid ${DLWS_GID} --disabled-password ${DLWS_USER_NAME}
    usermod -p $(echo ${DLTS_JOB_TOKEN} | openssl passwd -1 -stdin) ${DLWS_USER_NAME}
    chown ${DLWS_USER_NAME} /home/${DLWS_USER_NAME}/ /home/${DLWS_USER_NAME}/.profile /home/${DLWS_USER_NAME}/.ssh || /bin/true
    chmod 700 /home/${DLWS_USER_NAME}/.ssh || /bin/true

    # setup sudoers
    adduser $DLWS_USER_NAME sudo
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

    # export envs
    # options '-e' for exported ENVs only
    compgen -e | while read line; do
            if [[ $line != HOME* ]] && [[ $line != INTERACTIVE* ]] && [[ $line != LS_COLORS* ]]  && [[ $line != PATH* ]] && [[ $line != PWD* ]]; then
                # Since bash >= 4.4 we could use
                # echo "export ${line}=${!line@Q}" >> "${ENV_FILE}" ;
                # For compatible with bash < 4.4
                printf "export ${line}=%q\n" "${!line}" >> "${ENV_FILE}" ;
            fi; done
    echo "export PATH=$PATH:\${PATH}" >> "${ENV_FILE}"
    echo "export LD_LIBRARY_PATH=/usr/local/nvidia/lib64/:\${LD_LIBRARY_PATH}" >> "${ENV_FILE}"
    # source the envs
    if [ -f /etc/bash.bashrc ]; then
      chmod 644 /etc/bash.bashrc
    fi
    grep -qx "^\s*. ${ENV_FILE}" /home/${DLWS_USER_NAME}/.profile || cat << SCRIPT >> "/home/${DLWS_USER_NAME}/.profile"
    if [ -f ${ENV_FILE} ]; then
        . ${ENV_FILE}
    fi
    SCRIPT



    # any command should run as ${DLWS_USER_NAME}
    #runuser -l ${DLWS_USER_NAME} -c your_commands
  install.sh: |
    cwd=`dirname $0`
    ssh_root="$cwd/ssh_build/usr"

    mkdir -p /usr/etc
    cp $ssh_root/etc/* /usr/etc
    cp $cwd/ssh_config/sshd/sshd_config /usr/etc/sshd_config

    cp $cwd/ssh_config/init.d/* /etc/init.d
    cp $cwd/ssh_config/default/* /etc/default
    chmod +x /etc/init.d/ssh

    cp -r $ssh_root/bin $ssh_root/sbin $ssh_root/lib $ssh_root/libexec /usr/

    ssh-keygen -t dsa -f /usr/etc/ssh_host_dsa_key -N ""
    ssh-keygen -t rsa -f /usr/etc/ssh_host_rsa_key -N ""
    ssh-keygen -t ecdsa -f /usr/etc/ssh_host_ecdsa_key -N ""
  setup_ib_config.sh: |+
    #! /bin/bash
    set -x


    # find ib ip
    HOST_CONFIG_FILE=/job/.hosts
    IB_CONFIG_FILE=/job/ib_config
    if [ "$DLWS_ROLE_NAME" = "worker" ] && command -v ifconfig ;
    then
      ib_ip=`ifconfig |grep ib -A 1|grep inet |awk '{print $2}'`
      if ifconfig |grep ib -A 1|grep inet ;
      then
        if [ ! -f $IB_CONFIG_FILE ];then touch $IB_CONFIG_FILE;fi
        if [ ! -f $HOST_CONFIG_FILE ];then touch $HOST_CONFIG_FILE;fi
        if ! cat $IB_CONFIG_FILE |grep ib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX};
        then
          echo "ib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX} slots=${DLWS_NUM_GPU_PER_WORKER}" >> $IB_CONFIG_FILE
        else
          sed "s/#ib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX}.*/'ib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX} slots=${DLWS_NUM_GPU_PER_WORKER}'/g" -i $IB_CONFIG_FILE
        fi
        if ! cat $HOST_CONFIG_FILE |grep ib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX} ;
        then
          echo -e "${ib_ip}\tib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX}" >> $HOST_CONFIG_FILE
        else
          sed "s/.*ib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX}/${ib_ip}\tib-${DLWS_ROLE_NAME}-${DLWS_ROLE_IDX}/" -i $HOST_CONFIG_FILE
        fi
      fi
    fi

  setup_npu.py: |
    #!/usr/bin/python
    # -*- coding: UTF-8 -*-

    import os
    import json
    import time
    import pdb


    if __name__ == "__main__":

        done = 0
        rank_id = 0
        hccl_data = {}

        # for test only
        #os.environ['DLWS_WORKER_NUM'] = "2"
        #os.environ['DLWS_JOB_ID'] = "test_npu_device"
        #os.environ['DLWS_USER_NAME'] = "bifeng.peng"
        #

        worker_num = int(os.environ['DLWS_WORKER_NUM'])
        job_id = os.environ['DLWS_JOB_ID']
        user_name =  os.environ['DLWS_USER_NAME']
        npu_dir = '/home/%s/.npu/%s/' % (user_name, job_id)

        hccl_data["board_id"] = "0x0020"
        hccl_data["chip_info"] = "910"
        hccl_data["deploy_mode"] = "lab"
        hccl_data["group_count"] = "1"
        hccl_data["para_plane_nic_location"] = "device"
        hccl_data["para_plane_nic_name"] = [
                                            "eth0",
                                            "eth1",
                                            "eth2",
                                            "eth3",
                                            "eth4",
                                            "eth5",
                                            "eth6",
                                            "eth7"
                                        ]
        hccl_data["para_plane_nic_num"] = 8
        hccl_data["status"] = "completed"
        hccl_data["group_list"] = []

        group = {}
        group["device_num"] = worker_num * 8
        group["server_num"] = worker_num
        group["group_name"] = "test"
        group["instance_count"] = worker_num * 8
        group["instance_list"] = []

        while True:

            PATH = npu_dir + ('/npu_%d.info' % (done))
            if os.path.isfile(PATH) and os.access(PATH, os.R_OK):

                with open(PATH, "r") as f:

                    ips = ""
                    host_ip = ""

                    # get ips and host info from file
                    for line in f:
                        print(line)
                        if "ip=" in line:
                            _, ips = line.strip().split("=")
                        elif "host=" in line:
                            _, host_ip = line.strip().split("=")

                    # parse string to get all device ips
                    ip_list = ips.split(",")
                    for ip_elem in ip_list:

                        # one device
                        device_id, device_ip = ip_elem.split(":")

                        ## set up group list
                        device_item = {}  # item of instance list
                        device_item["devices"] = {
                            "device_id" : device_id,
                            "device_ip" : device_ip
                        }

                        device_item["rank_id"] = rank_id
                        device_item["server_id"] = host_ip

                        # append to instance list
                        rank_id = rank_id + 1
                        #pdb.set_trace()
                        group["instance_list"].append(device_item)

                    f.close()
                    done = done + 1
            else:
                pass

            if done == worker_num:
                break
            else:
                pass

            time.sleep(1)

        print("succ!")
        hccl_data["group_list"].append(group)
        # dump to json file
        with open(npu_dir + '/hccl.json', 'w') as fp:
            json.dump(hccl_data, fp)

        pass
  setup_ssh_config.sh: |-
    #! /bin/bash
    set -x

    # generate ps host list
    ps_host_list=""
    for i in $(seq 0 $(( ${DLWS_NUM_PS} - 1 )) )
    do
        ps_host_list+="ps-${i} "
    done

    # generate worker host list
    worker_host_list=""
    if [ "$DLWS_ROLE_NAME" = "master" ];
    then
        worker_host_list="${DLWS_ROLE_NAME}"
    else
        for i in $(seq 0 $(( ${DLWS_NUM_WORKER} - 1 )) )
        do
            worker_host_list+="worker-${i} "
        done
    fi

    # generate host list
    host_list="${ps_host_list} ${worker_host_list}"

    # generate ~/.ssh/config
    SSH_CONFIG_FILE=/home/${DLWS_USER_NAME}/.ssh/config
    NPU_CONFIG_FILE=/home/${DLWS_USER_NAME}/.ssh/npu_config

    >${SSH_CONFIG_FILE}
    >${NPU_CONFIG_FILE}

    chown ${DLWS_USER_NAME} ${SSH_CONFIG_FILE}
    chmod 600 ${SSH_CONFIG_FILE}

    for host in ${host_list}
    do
        if [ "$DLWS_ROLE_NAME" = "master" ];
        then
            ip=$DLWS_SD_SELF_IP
            port=$DLWS_SD_SELF_SSH_PORT
            host_ip=$DLWS_SD_SELF_HOST_IP
        else
            role=${host%%-*}
            idx=${host##*-}

            ip_key=DLWS_SD_${role}${idx}_IP
            ib_ip_key=DLWS_SD_${role}${idx}_IB_IP
            port_key=DLWS_SD_${role}${idx}_SSH_PORT

            npu_ip_list_key=DLWS_SD_${role}${idx}_SSH_PORT
            host_ip_key=DLWS_SD_${idx}_HOST_IP

            ip=$(printenv $ip_key)
            ib_ip=$(printenv $ib_ip_key)
            port=$(printenv $port_key)

            npu_ip_list=$(printenv $npu_ip_list_key)
            host_ip=$(printenv $host_ip_key)
        fi
        cat >>${SSH_CONFIG_FILE} <<EOF

    Host ${host}
      HostName ${ip}
      Port ${port}
      User ${DLWS_USER_NAME}
      StrictHostKeyChecking no
      UserKnownHostsFile /dev/null

    EOF

        # also add entry to /etc/hosts
        echo -e "${ip}\t${host}" >> /etc/hosts
    done

    # generate npu info for distributed npu jobs
    if [ ! -z npu_ip_list ] && [ "$role" = "worker" ]; then
        cat >> ${NPU_CONFIG_FILE} << EOF
    ${npu_ip_list} slots=${DLWS_NUM_GPU_PER_WORKER}
    ${host_ip} slots=${DLWS_NUM_GPU_PER_WORKER}
    EOF
    fi

    envs=(
    LD_LIBRARY_PATH
    LIBRARY_PATH
    PATH
    PYTHONPATH
    NCCL_IB_DISABLE
    NCCL_VERSION
    DLWS_HOST_NETWORK
    DLWS_JOB_ID
    DLTS_JOB_TOKEN
    DLWS_NUM_PS
    DLWS_NUM_WORKER
    DLWS_NUM_GPU_PER_WORKER
    DLWS_NUM_WORKER
    DLWS_VC_NAME
    DLWS_UID
    DLWS_GID
    DLWS_USER_NAME
    DLWS_USER_EMAIL
    DLWS_ROLE_NAME
    DLWS_ROLE_IDX
    )

    SSH_ENVIRONMENT_FILE=/home/${DLWS_USER_NAME}/.ssh/environment
    for env_key in "${envs[@]}" ; do
        if [ "`printenv $env_key`" != "" ] ; then
            printf $env_key >> $SSH_ENVIRONMENT_FILE
            printf = >> $SSH_ENVIRONMENT_FILE
            printenv $env_key >> $SSH_ENVIRONMENT_FILE
        fi
    done
    chown ${DLWS_USER_NAME} ${SSH_ENVIRONMENT_FILE}
    chmod 600 ${SSH_ENVIRONMENT_FILE}

    mkdir -p /root/.ssh && cp /home/${DLWS_USER_NAME}/.ssh/* /root/.ssh/ && chown root /root/.ssh/* && chmod 600 /root/.ssh/*

    # generate /job/hostfile
    if [ "$DLWS_ROLE_NAME" = "master" ] || [ "$DLWS_ROLE_NAME" = "ps" ];
    then
        SLOT_FILE="/job/hostfile"
        >${SLOT_FILE}
        chown ${DLWS_USER_NAME} ${SLOT_FILE}

        for host in ${worker_host_list}
        do
            slots=${DLWS_NUM_GPU_PER_WORKER}
            cat >>${SLOT_FILE} <<EOF
    ${host} slots=${slots}
    EOF
        done
    fi

    # make sure worker have sshd up and running
    if [ "$DLWS_ROLE_NAME" = "ps" ];
    then
        for host in ${host_list}
        do
            succ=false
            for i in `seq 1 3600` ; do
                echo "testing $host"
                ssh $host "echo 1"
                # do not add code here
                rtn=$?
                echo "done testing $host"
                if [ "$rtn" -eq "0" ] ; then
                    succ=true
                    echo "$host has done sshd setup"
                    break
                else
                    echo "$host has not done sshd setup wait 1s"
                    sleep 1
                fi
            done
            if [ "$succ" = "false" ] ; then
                exit 1
            fi
        done
    fi

    HOST_CONFIG_FILE=/job/.hosts
    if [ "$DLWS_ROLE_NAME" = "ps" ];then
      if [ ! -f $HOST_CONFIG_FILE ];then touch $HOST_CONFIG_FILE;fi
      cat $HOST_CONFIG_FILE >> /etc/hosts
    fi
  setup_sshd.sh: |
    #! /bin/bash
    set -ex

    function fail {
      echo $1 >&2
      exit 1
    }

    function retry {
      local n=1
      local max=3
      local delay=3
      while true; do
        "$@" && break || {
          if [[ $n -lt $max ]]; then
            ((n++))
            echo "Command failed. Attempt $n/$max:"
            sleep $delay;
          else
            fail "The command has failed after $n attempts."
          fi
        }
      done
    }

    function setup_sshd {
        SSH_PORT=$DLWS_SD_SELF_SSH_PORT
        sed -i -E "s/^#?Port 22/Port ${SSH_PORT}/" /usr/etc/sshd_config || exit 1

        echo "${SSH_PORT}" > ${PROC_DIR}/SSH_PORT
        echo "${POD_IP}" > ${PROC_DIR}/POD_IP

        time /etc/init.d/ssh restart || exit 1
    }

    retry setup_sshd
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: dlws-scripts